[
  {
    "path": "posts/2021-01-25-do-nba-players-get-tired/",
    "title": "Do NBA players get tired? A case-study of Giannis Antetokounmpo",
    "description": "NBA players are ATHLETES. But, do they get tired? Does their performance decline late in the game?",
    "author": [
      {
        "name": "Guy Frederick Sutton",
        "url": {}
      }
    ],
    "date": "2021-01-25",
    "categories": [
      "R",
      "tidyverse",
      "Data cleaning",
      "ggplot2",
      "Player performance",
      "Milwaukee Bucks",
      "Giannis Antetokounmpo"
    ],
    "contents": "\r\nIt always amazes me watching professional athletes at work. If I had to run, shoot, defend, sprint, screen like the NBA pros do… I would be lying on the floor, gasping for air within the 1st quarter. This got me thinking, do NBA players get tired? Does their performance vary over time? Do they make fewer rebounds or field goals the longer they have been on the court? While this is certainly a topic that peeks my interest, there are also some practical implications. For example, it could be quite informative to identify optical performance thresholds for each player to know:\r\nhow long can they perform at their peek abilities per game? (e.g. how many minutes per game is optimal for their performance?), and\r\n\r\nhow long each stint on court during the game should be to maximise performance?\r\n\r\nIn my first blog post, I will be exploring these two questions using some basic data visualisations. Later blogposts will get into a bit more detail (building some statistical models) - stay tuned!\r\nLoad required packages\r\nThe workhorse package we will be using is the NBA stats API package nbastatR. We need to install the package from GitHub, which only needs to be done once.\r\n\r\n\r\n# To install a GitHub package: \r\ndevtools::install_github(\"abresler/nbastatR\")\r\n\r\n# Once you have downloaded a GitHub package, we should then\r\n# edit our code so that the package is not re-installed each time we \r\n# re-run our script. We place a '#' in front of the command to comment it out. \r\n# If we need to run that code again later, we simply remove the '#' \r\n# devtools::install_github(\"abresler/nbastatR\")\r\n\r\n\r\n\r\nOur next step is to load the other packages we will require for this analysis. I really like using the pacman package to install/load R packages. I find this really helps when sharing code with collaborators who are less familiar with R. They can just open the script and press ‘run’ and not have to worry about installing new packages. pacman will install any packages that are not installed on your machine, and load all the remaining packages.\r\n\r\n\r\n# Load required packages \r\nif (!require(\"pacman\")) install.packages(\"pacman\")\r\npacman::p_load(tidyverse, \r\n               lubridate,\r\n               zoo,\r\n               janitor,\r\n               nbastatR,\r\n               future)\r\n\r\n\r\n\r\nDownloading play-by-play data\r\nWe will now use the nbastatR package to download play-by-play data from the NBA API. We can download data for different seasons, different teams… This can take a really long time (at least it does on my PC), so below, I will just download the data for (1) the 2019/2020 season, and (2) only the Milwaukee Bucks.\r\n\r\n\r\n# Extract all games for the 2020 season (excluding pre-season and all-star weekend)\r\ngame_logs <- game_logs(seasons = 2020)\r\n\r\n# Process the game logs \r\ngames <- game_logs %>%\r\n  # Keep only these columns \r\n  dplyr::select(idGame, slugTeam, slugOpponent, locationGame) %>%\r\n  # Use a conditional statement to process the team home/away data \r\n  dplyr::mutate(slugTeamHome = dplyr::if_else(locationGame == \"H\", \r\n                                              slugTeam, \r\n                                              slugOpponent),\r\n                slugTeamAway = dplyr::if_else(locationGame == \"A\", \r\n                                              slugTeam, \r\n                                              slugOpponent)) %>%\r\n  # Drop these columns - no longer required\r\n  dplyr::select(-c(slugTeam, slugOpponent, locationGame)) %>%\r\n  dplyr::distinct(idGame, .keep_all = TRUE) %>%\r\n  # Here, we filter for the teams we want data for \r\n  # We have to use team codes. E.g. MIL = Milwaukee Bucks\r\n  # - Filter the games where either (denoted by the '|' bar) the home or \r\n  #   or away team is the Bucks. \r\n  dplyr::filter(slugTeamHome == \"MIL\" | slugTeamAway == \"MIL\")\r\n\r\n# Extract the play-by-play for each game \r\nplay_logs_all <- play_by_play_v2(game_ids = unique(games$idGame))\r\n\r\n\r\n\r\nOnce the data is downloaded, quite a bit of data pre-processing and data cleaning is required, which will not be shown in this blogpost. I have edited this code slightly from the amazing NBA blog by Ramiro Bentes. If you want to delve into the data cleaning code, it is available in the [source R markdown file] (https://github.com/guysutton/nba_analytics_blog/blob/main/_posts/2021-01-25-do-nba-players-get-tired/do-nba-players-get-tired.Rmd) for this blogpost.\r\nWe now have play-by-play data for all the Milwaukee Bucks games for the 2019/2020 season. Each game has a unique ID number (idGame), each play within each game has its own unique ID (numberEvent), and for each play, we have the players who were on the court for each team (homeTeamLineup and awayTeamLineup), amongst a range of other variables.\r\n\r\n# A tibble: 6 x 29\r\n  idGame numberEventMess~ numberEventActi~ slugTeamHome slugTeamAway\r\n  <chr>  <chr>            <chr>            <chr>        <chr>       \r\n1 21900~ 12               0                HOU          MIL         \r\n2 21900~ 10               0                HOU          MIL         \r\n3 21900~ 1                1                HOU          MIL         \r\n4 21900~ 5                1                HOU          MIL         \r\n5 21900~ 6                2                HOU          MIL         \r\n6 21900~ 3                11               HOU          MIL         \r\n# ... with 24 more variables: slugTeamPlayer1 <chr>,\r\n#   slugTeamPlayer2 <chr>, slugTeamPlayer3 <chr>, numberPeriod <chr>,\r\n#   timeQuarter <chr>, secsPassedGame <dbl>, numberEvent <dbl>,\r\n#   namePlayer1 <chr>, namePlayer2 <chr>, namePlayer3 <chr>,\r\n#   descriptionPlayHome <chr>, descriptionPlayVisitor <chr>,\r\n#   ptsHome <chr>, ptsAway <chr>, shotPtsHome <chr>,\r\n#   shotPtsAway <chr>, marginBeforeHome <chr>,\r\n#   marginBeforeAway <chr>, lineupHome <chr>, lineupAway <chr>,\r\n#   canSub <chr>, newptsHome <chr>, newptsAway <chr>, subOpp <chr>\r\n\r\nHowever, we still need to process the data so that we can:\r\nDefine how many periods each player was on the court for during each game\r\nDefine how long was each period\r\nConvert our data into long-format, so that each player who was on the court, for each play, gets their own row. (We will need this format of data when we start summarising how player performance later on).\r\n\r\n\r\n\r\nWe now know exactly which plays each player was on the court for, but we need to create a column which explicitly notes whether the player was on the court or not (stints), and how long each stint on court lasted.\r\n\r\n\r\n# Define each stint each player has on court \r\ndefine_stint <- game_test %>%\r\n  # Define stints as the cumulative sum of times the player is subbed\r\n  # cumsum starts at 0, so we need to + 1 to each value \r\n  dplyr::mutate(stints_on_court = cumsum(player_subbed == \"Yes\"),\r\n                stints_on_court = stints_on_court + 1) %>%\r\n  dplyr::ungroup() %>%\r\n  # Define start and end time of each stint with a min/max statement\r\n  dplyr::group_by(idGame, playerNames, stints_on_court) %>%\r\n  dplyr::mutate(time_at_start = min(secsPassedGame),\r\n                time_at_end   = max(secsPassedGame)) %>%\r\n  # Calculate total seconds of each stint\r\n  dplyr::mutate(time_stint_secs = time_at_end - time_at_start) %>%\r\n  # Convert seconds into minutes and seconds \r\n  dplyr::mutate(time_stint_mins = time_stint_secs / 60) %>%\r\n  # Calculate time since start of each stint \r\n  dplyr::mutate(time_since_start_stint = secsPassedGame - time_at_start) %>%\r\n  # Manually define 60 second intervals - \r\n  # I couldn't force ggplot2::cut_width to start @ 0... Help?  \r\n  dplyr::mutate(minute_cats = dplyr::case_when(\r\n    between(time_since_start_stint, 0, 60) ~ \"1\",\r\n    between(time_since_start_stint, 61, 120) ~ \"2\",\r\n    between(time_since_start_stint, 121, 180) ~ \"3\",\r\n    between(time_since_start_stint, 181, 240) ~ \"4\",\r\n    between(time_since_start_stint, 241, 300) ~ \"5\",\r\n    between(time_since_start_stint, 301, 360) ~ \"6\",\r\n    between(time_since_start_stint, 361, 420) ~ \"7\",\r\n    between(time_since_start_stint, 421, 480) ~ \"8\",\r\n    between(time_since_start_stint, 481, 540) ~ \"9\",\r\n    between(time_since_start_stint, 541, 600) ~ \"10\",\r\n    between(time_since_start_stint, 601, 660) ~ \"11\",\r\n    between(time_since_start_stint, 661, 720) ~ \"12\",\r\n    between(time_since_start_stint, 721, 780) ~ \"13\",\r\n    between(time_since_start_stint, 781, 840) ~ \"14\",\r\n    between(time_since_start_stint, 841, 900) ~ \"15\",\r\n    between(time_since_start_stint, 901, 960) ~ \"16\",\r\n    between(time_since_start_stint, 961, 1020) ~ \"17\",\r\n    between(time_since_start_stint, 1021, 1080) ~ \"18\",\r\n    between(time_since_start_stint, 1081, 1140) ~ \"19\",\r\n    between(time_since_start_stint, 1141, 1200) ~ \"20\",\r\n    between(time_since_start_stint, 1221, 1280) ~ \"21\",\r\n    between(time_since_start_stint, 1281, 1340) ~ \"22\",\r\n    between(time_since_start_stint, 1341, 1400) ~ \"23\",\r\n    between(time_since_start_stint, 1401, 1460) ~ \"24\")) %>%\r\n  # For each play, does the score change or not?\r\n  # - We will need this to classify whether 2pt/3pt/free throw attempts\r\n  #   were successful or not. \r\n  dplyr::mutate(score_change = dplyr::if_else(shotPtsHome > 0 | \r\n                                                shotPtsAway > 0, 1, 0))\r\n\r\n\r\n\r\nOur last bit of data cleaning requires that we categorize each play. For example, was the play a 2pt field goal attempt, a free throw attempt, was the shot made or missed?\r\n\r\n\r\n# Combine the descriptions for each play for home and away teams into \r\n# a single column\r\ndescription_play <- define_stint %>%\r\n  dplyr::mutate(descriptionPlay = dplyr::coalesce(descriptionPlayHome, descriptionPlayVisitor))\r\n\r\n# Define each event as a particular play\r\nevents_defined <- description_play %>%\r\n  # Was 3pt fg attempt made?\r\n  dplyr::mutate(is_3pt_made = dplyr::case_when(\r\n    stringr::str_detect(descriptionPlay, \"3PT\") &\r\n      score_change == 1 ~ 1,\r\n    stringr::str_detect(descriptionPlay, \"3PT\") &\r\n      score_change == 0 ~ 0)) %>%\r\n  # Was 2pt fg attempt made?\r\n  dplyr::mutate(is_2pt_made = dplyr::case_when(\r\n    numberEventMessageType == 1 & \r\n      !stringr::str_detect(descriptionPlay, \"3PT\") ~ 1,\r\n    numberEventMessageType == 2 & \r\n      !stringr::str_detect(descriptionPlay, \"3PT\") ~ 0)) %>%\r\n  # Was event a rebound? \r\n  dplyr::mutate(is_rebound = dplyr::case_when(\r\n    numberEventMessageType == 4 & \r\n      stringr::str_detect(descriptionPlay, \"REBOUND\") ~ 1,\r\n    TRUE ~ 0)) %>%\r\n  # Was event a made free throw?\r\n  dplyr::mutate(is_ft_made = dplyr::case_when(\r\n    numberEventMessageType == 3 & \r\n      score_change == 1 ~ 1,\r\n    numberEventMessageType == 3 & \r\n      score_change == 0 ~ 0))\r\n\r\n\r\n\r\nSummarise and visualise performance over time\r\nFinally, the bit of the analysis that we are actually most interested in. Let’s now summarise how many 2pt/3pt/free throws/rebounds are made per minute that each player is on the court, for each game, and then these summarise performance metrics over the entire 2020 season.\r\n\r\n\r\nperform_stint_min <- events_defined %>%\r\n  dplyr::ungroup() %>%\r\n  dplyr::group_by(playerNames, idGame, stints_on_court, minute_cats, .drop = FALSE) %>%\r\n  dplyr::summarise(\r\n    total_rebounds = sum(is_rebound, na.rm = TRUE),\r\n    total_2pt_made = sum(is_2pt_made, na.rm = TRUE),\r\n    total_2pt_attempt = sum(!is.na(is_2pt_made)),\r\n    perc_2pt_made = total_2pt_made / total_2pt_attempt,\r\n    total_3pt_made = sum(is_3pt_made, na.rm = TRUE),\r\n    total_3pt_attempt = sum(!is.na(is_3pt_made)),\r\n    perc_3pt_made = total_3pt_made / total_3pt_attempt,\r\n    total_ft_made  = sum(is_ft_made, na.rm = TRUE),\r\n    total_ft_attempt = sum(!is.na(is_ft_made)),\r\n    perc_ft_made = total_ft_made / total_ft_attempt) %>%\r\n  dplyr::ungroup()%>%\r\n  # Now calculate mean summary for season (not per-game)\r\n  dplyr::group_by(playerNames, stints_on_court, minute_cats, .drop = FALSE) %>%\r\n  dplyr::summarise(\r\n    n_rebounds       = mean(total_rebounds, na.rm = TRUE),\r\n    n_2pt_made       = mean(total_2pt_made, na.rm = TRUE),\r\n    n_3pt_made       = mean(total_3pt_made, na.rm = TRUE),\r\n    n_ft_attempt     = mean(total_ft_made, na.rm = TRUE),\r\n    sd_rebounds      = sd(total_rebounds, na.rm = TRUE),\r\n    sd_2pt_made      = sd(total_2pt_made, na.rm = TRUE),\r\n    sd_3pt_made      = sd(total_3pt_made, na.rm = TRUE),\r\n    sd_ft_attempt    = sd(total_ft_made, na.rm = TRUE),\r\n    n = n()) %>%\r\n  # Filter to keep only stints with n => 10 per player\r\n  dplyr::filter(!n < 9)\r\n\r\n\r\n\r\nLet’s take a quick look at the structure of our data now.\r\n\r\nRows: 476\r\nColumns: 12\r\nGroups: playerNames, stints_on_court [1,500]\r\n$ playerNames     <chr> \"Brook Lopez\", \"Brook Lopez\", \"Brook Lope...\r\n$ stints_on_court <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,...\r\n$ minute_cats     <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"...\r\n$ n_rebounds      <dbl> 1.661765, 2.529412, 2.264706, 2.132353, 2...\r\n$ n_2pt_made      <dbl> 0.9558824, 1.0588235, 1.1617647, 1.220588...\r\n$ n_3pt_made      <dbl> 0.5000000, 0.5441176, 0.7647059, 0.602941...\r\n$ n_ft_attempt    <dbl> 0.3088235, 0.5294118, 0.2647059, 0.397058...\r\n$ sd_rebounds     <dbl> 1.1409644, 1.4296497, 1.2170143, 1.291815...\r\n$ sd_2pt_made     <dbl> 0.9373482, 0.8789810, 0.9713861, 0.895187...\r\n$ sd_3pt_made     <dbl> 0.6108472, 0.7616522, 0.8484867, 0.715285...\r\n$ sd_ft_attempt   <dbl> 0.6523746, 0.8889133, 0.7043076, 0.812949...\r\n$ n               <int> 68, 68, 68, 68, 68, 65, 51, 41, 15, 68, 6...\r\n\r\nHow many minutes should Giannis play per stint on court?\r\nBelow, we create a very simple ggplot visualisation of the average number of rebounds effected per minute by Giannis Antetokounmpo for each period/stint that he was on the court over the 2020 season. A nice little trick that I have been using in recent months is to use geom_smooth instead of geom_line or geom_point to visualise the relationship between two continuous variables. This is by no means meant to be a predictive model - this is simply an exploratory data analysis (EDA) exercise.\r\n(i) Number of rebounds\r\n\r\n\r\nperform_stint_min %>%\r\n  dplyr::mutate(stints_on_court = as.factor(stints_on_court)) %>%\r\n  dplyr::mutate(minute_cats = readr::parse_double(minute_cats)) %>%\r\n  dplyr::filter(playerNames == \"Giannis Antetokounmpo\") %>%\r\n  ggplot(data = ., aes(x = minute_cats, \r\n                       y = n_rebounds,\r\n                       group = stints_on_court,\r\n                       colour = stints_on_court)) +\r\n  geom_smooth(aes(fill = stints_on_court),\r\n              alpha = 0.3) +\r\n  labs(x = \"Minutes on court (mins)\",\r\n       y = \"No. of rebounds \\n(per minute)\",\r\n       title = \"Giannis Antetokounmpo gets less rebounds the longer he is on court\",\r\n       subtitle = \"Each panel represents successive periods/stints that he was on the court\") +\r\n  facet_wrap(~ stints_on_court, ncol = 3)\r\n\r\n\r\n\r\n\r\nInspecting the panels clearly shows some decline in Giannis’s rebounding stats the longer he is on court. After about 5 - 7.5 mins on court, Giannis makes fewer rebounds. This does not mean his performance is poor - even in later stints on the court, he is still getting more than 1 rebound per minute, on average. What an athlete!\r\n(ii) Number of 2PT FG’s made per game\r\n\r\n\r\nperform_stint_min %>%\r\n  dplyr::mutate(stints_on_court = as.factor(stints_on_court)) %>%\r\n  dplyr::mutate(minute_cats = readr::parse_double(minute_cats)) %>%\r\n  dplyr::filter(playerNames == \"Giannis Antetokounmpo\") %>%\r\n  ggplot(data = ., aes(x = minute_cats, \r\n                       y = n_2pt_made,\r\n                       group = stints_on_court,\r\n                       colour = stints_on_court)) +\r\n  geom_smooth(aes(fill = stints_on_court),\r\n              alpha = 0.3) +\r\n  labs(x = \"Minutes on court (mins)\",\r\n       y = \"No. of 2PT FG made \\n(per minute)\",\r\n       title = \"Giannis makes (slightly) fewer 2PT buckets the longer he is on court\",\r\n       subtitle = \"Each panel represents successive periods/stints that he was on the court\") +\r\n  facet_wrap(~ stints_on_court, ncol = 3)\r\n\r\n\r\n\r\n\r\nGiannis seems to make slightly fewer 2PT field goals the longer he is on the court. This effect is not very pronounced, except when Giannis has been on court for longer that about 8 - 10 mins (see Panel 3 and 4 specifically). Again, even at his worst average 2PT scoring rates, Giannis scores a bucket every 2 minutes (i.e. 1 PT per min)… It is no surprise that Giannis is closing in on 11 000 points for the Bucks at only 26 years old.\r\nHow many minutes should Giannis play per game?\r\nAbove we looked at Giannis’s performance (no. rebounds and 2PT scoring) per minute player during successive stints on court. This data could help us to determine how long Giannis could be expected to perform at his peek capacity for each stint he has on court. However, what if we wanted to see how many minutes Giannis should be playing per game to maximise performance?\r\n(i) Number of rebounds\r\n\r\n\r\n\r\n\r\n\r\nperform_stint_game %>%\r\n  #dplyr::mutate(stints_on_court = as.factor(stints_on_court)) %>%\r\n  #dplyr::mutate(total_m = readr::parse_double(minute_cats)) %>%\r\n  dplyr::filter(playerNames == \"Giannis Antetokounmpo\") %>%\r\n  ggplot(data = ., aes(x = total_minutes_game, \r\n                       y = n_rebounds)) +\r\n  geom_smooth(colour = \"black\") +\r\n  labs(x = \"Total minutes played (mins)\",\r\n       y = \"No. of rebounds \\n(per minute)\",\r\n       title = \"Giannis Antetokounmpo gets fewer rebounds the longer he is on court\") \r\n\r\n\r\n\r\n\r\nGiannis gets plenty of rebounds throughout the game, but the rate at which he rebounds does decrease over the course of the game. After 30 minutes, he is still getting about 1.75 rebounds per minute. I don’t think there is anything to worry about in terms of a drop in performance here…\r\n(ii) Number of 2PT FG’s made per game\r\n\r\n\r\nperform_stint_game %>%\r\n  #dplyr::mutate(stints_on_court = as.factor(stints_on_court)) %>%\r\n  #dplyr::mutate(total_m = readr::parse_double(minute_cats)) %>%\r\n  dplyr::filter(playerNames == \"Giannis Antetokounmpo\") %>%\r\n  ggplot(data = ., aes(x = total_minutes_game, \r\n                       y = n_2pt_made)) +\r\n  geom_smooth(colour = \"black\") +\r\n  labs(x = \"Total minutes played (mins)\",\r\n       y = \"No. of 2PT FG's made \\n(per minute)\",\r\n       title = \"Giannis Antetokounmpo makes fewer 2PT's the longer he is on court\") \r\n\r\n\r\n\r\n\r\nGiannis can maintain his optimal 2PT scoring rates for about 20 minutes. Thereafter, the number of 2PT buckets scores declines steadily between 20 - 30 minutes played, albeit we must note that Giannis only scores about 0.2 buckets fewer after he has played 30 minutes than when he is fresh (0 - 10 minutes played).\r\nWhat have we leart today?\r\nDownload NBA play-by-play data from the NBA API\r\nProcess the data using tidyverse cleaning packages (e.g. dplyr, tidyr, stringr)\r\nCreate simple ggplot graphics to visualise player performance over time\r\nExploratory analyses suggest that Giannis’s performance does decline slightly the longer he has been on court.\r\nAnalytics implications:\r\nThe workflow presented above is how I approach exploratory data analysis (EDA) when building predictive models. I like to invest a lot of time into my EDA to get a really good understanding of the underlying data I am working with. In terms of model building, I like to, wherever possible, only include predictor variables that appear to have some justifiable relationship with whatever our response variable is. For example, if we were trying to build a model to predict how many points Giannis will score per game, our EDA here clearly shows that the number of minutes player per game MAY be an important predictor.\r\nPractical implications:\r\nDespite taking a very simplistic approach above, we can clearly see that Giannis’s performance declines over the course of a game. As fatigue sets in, his numbers drop, slightly. After 30 minutes played, his 2PT scoring rate declines to about 0.2 buckets fewer per minute than at the start of the game. This is hardly anything to be concerned about.\r\nWe also saw that for each period Giannis spends on court, his performance tails off ever so slightly after about 7.5 minutes. Intuitively, the data indicates that to optimise Giannis’s performance, he should be used in short, frequent bursts on the court (< 5-6 mins per stint on court).\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-01-25-do-nba-players-get-tired/do-nba-players-get-tired_files/figure-html5/giannis 2pt total minutes-1.png",
    "last_modified": "2021-01-26T12:57:32+02:00",
    "input_file": "do-nba-players-get-tired.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to data science in R for the NBA",
    "description": "For all things data science, NBA and analytics",
    "author": [
      {
        "name": "Guy Frederick Sutton",
        "url": {}
      }
    ],
    "date": "2021-01-23",
    "categories": [],
    "contents": "\r\nI have always been an avid sports fanatic - growing up as a kid in South Africa, sport is just a way of life. Rugby, cricket, football (soccer), golf, tennis, you name it… As I got older, my attention shifted to American football (NFL) and baseball. More recently, I have become a massive NBA fan - who can say no to a massive Jarrett Allen block, or a Giannis dunk?\r\nThis blog will serve as a space for me to combine my love for basketball and data analytics/data science that I have developed over the course of getting a PhD in the sciences. I have about 8 years of experience using the R statistical platform, which has become one of the most popular statistics programmes worldwide. Most of my work will thus be written in R, however, I hope to add to my data analysis skills by learning some new languages and skills (e.g. Julia and SQL).\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-01-23T22:21:12+02:00",
    "input_file": {}
  }
]
