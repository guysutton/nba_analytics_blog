[
  {
    "path": "posts/2021-02-02-do-the-nets-big-3-play-better-together/",
    "title": "Do the Nets 'Big 3' play better together?",
    "description": "Can Kevin Durant, James Harden and Kyrie Irving play together?",
    "author": [
      {
        "name": "Guy Frederick Sutton",
        "url": {}
      }
    ],
    "date": "2021-02-02",
    "categories": [
      "R",
      "tidyverse",
      "Data cleaning",
      "ggplot2",
      "stringr",
      "function",
      "Player performance",
      "Brooklyn Nets"
    ],
    "contents": "\r\nThe Brooklyn Nets have established one of the most exciting offensive line-ups in NBA history. By signing Kevin Durant and later James Harden to a team already blessed to host Kyrie Irving, the Nets have created the ‘Big 3’. Much debate has ensued about whether the Nets are a genuine championship-level team given their lack of any real semblance of a defense, or whether the Big 3 will be able to play together on the same team. This got me thinking: how well do KD, Kyrie and Harden play when they are on the court together versus when they are the sole Big 3 player on court.\r\nLoad required packages\r\n\r\n\r\nif (!require(\"pacman\")) install.packages(\"pacman\")\r\npacman::p_load(tidyverse, \r\n               janitor,\r\n               nbastatR,\r\n               future,\r\n               devtools)\r\n\r\n\r\n\r\nDownloading play-by-play data\r\nI have written a custom helper function to download and clean play-by-play data from the nbastatR API package. Let’s source this helper function from my GitHub and use it to download play-by-play data for the 2020-2021 season for the Brooklyn Nets and clean the data frame. This function is based on code written on the amazing NBA blog by Ramiro Bentes. I take no credit for writing any of this code whatsoever - I just turned it into a function instead of having to copy-paste the raw code each time I want to use it.\r\n\r\n\r\n# Load custom function to download raw data \r\ndevtools::source_url(\"https://raw.githubusercontent.com/guysutton/nba_analytics_blog/main/functions/function_get_pbp_lineups.R\") \r\n\r\n# Use custom function to download 2020-2021 data for Brooklyn Nets\r\npbp_data <- get_pbp_lineups(teams = \"BKN\", years = 2021)\r\n\r\n\r\n\r\nDefining each play by who is on court\r\nBefore we start calculating any summary statistics, we need to categorise each play in terms of which of the ‘Big 3’ were on court. The play-by-play data we downloaded above has a column containing the lineups on court for each play (lineups). As such, we can combine dplyr::case_when and stringr::str_detect to search through the lineups for each play for the names of the Big 3 and create a new categorical variable telling us which combination of the Big 3 were on court for each play.\r\n\r\n\r\nperform_stint_game <- pbp_data %>%\r\n  dplyr::ungroup() %>%\r\n  # numberEvent is a unique ID for each play\r\n  dplyr::group_by(playerNames, \r\n                  idGame, \r\n                  numberEvent,\r\n                  .drop = FALSE) %>%\r\n  # Add column indicating who was on court \r\n  dplyr::mutate(players_on_court = dplyr::case_when(\r\n    # Find plays where all three Big 3 are on court\r\n    stringr::str_detect(lineups, \"Kevin Durant\") &\r\n      stringr::str_detect(lineups, \"James Harden\") &\r\n      stringr::str_detect(lineups, \"Kyrie Irving\") ~ \"Big 3\",\r\n    # Find play when only KD and Harden are on court\r\n    stringr::str_detect(lineups, \"Kevin Durant\") &\r\n      stringr::str_detect(lineups, \"James Harden\") &\r\n      !stringr::str_detect(lineups, \"Kyrie Irving\") ~ \"KD + JH\",\r\n    # Find plays when only KD and Kyrie are on court \r\n    stringr::str_detect(lineups, \"Kevin Durant\") &\r\n      !stringr::str_detect(lineups, \"James Harden\") &\r\n      stringr::str_detect(lineups, \"Kyrie Irving\") ~ \"KD + KI\",\r\n    # Find players when only Harden and Kyrie are on court\r\n    !stringr::str_detect(lineups, \"Kevin Durant\") &\r\n      stringr::str_detect(lineups, \"James Harden\") &\r\n      stringr::str_detect(lineups, \"Kyrie Irving\") ~ \"JH + KI\",\r\n    # Find plays with only KD\r\n    stringr::str_detect(lineups, \"Kevin Durant\") &\r\n      !stringr::str_detect(lineups, \"James Harden\") &\r\n      !stringr::str_detect(lineups, \"Kyrie Irving\") ~ \"KD only\",\r\n    # Find plays with only Harden\r\n    !stringr::str_detect(lineups, \"Kevin Durant\") &\r\n      stringr::str_detect(lineups, \"James Harden\") &\r\n      !stringr::str_detect(lineups, \"Kyrie Irving\") ~ \"JH only\",\r\n    # Find plays with only Kyrie\r\n    !stringr::str_detect(lineups, \"Kevin Durant\") &\r\n      !stringr::str_detect(lineups, \"James Harden\") &\r\n      stringr::str_detect(lineups, \"Kyrie Irving\") ~ \"KI only\",\r\n    # Find plays with none of KD, Harden or Kyrie on court\r\n    !stringr::str_detect(lineups, \"Kevin Durant\") &\r\n      !stringr::str_detect(lineups, \"James Harden\") &\r\n      !stringr::str_detect(lineups, \"Kyrie Irving\") ~ \"None\"))\r\n\r\n\r\n\r\nWrite function to summarise player performance\r\nNow that we know who was on court for each play, let’s summarise player performance (per minute) to determine whether the KD, Harden and/or Kyrie play better alone, or with other members of the Big 3 on court too. We want to look at the individual performance for each of KD, Harden and Kyrie (and later we may be interested in looking in the performance of other Nets players with and without the Big 3), so let’s write a quick function to calculate performance. Here, our measure of performance is going to be the no. of points scored (/minute).\r\nLet’s pass a player argument to our function so that we only have to specify the name of the player for which we want to calculate summary statistics and the function will take care of the rest.\r\n\r\n\r\n# Write function to calculate free throws and 2/3PT's made per minute over the entire game \r\ncalc_performance_min <- function(player){\r\n\r\n  perform_stint_game %>%\r\n  dplyr::ungroup() %>%\r\n  dplyr::filter(playerNames %in% {{ player }}) %>%\r\n  dplyr::filter(namePlayer1 %in% {{ player }}) %>%\r\n  dplyr::group_by(playerNames, \r\n                  idGame, \r\n                  players_on_court,\r\n                  minute_cats, \r\n                  .drop = FALSE) %>%\r\n  # Summarise player performance per minute (for each game)\r\n  dplyr::summarise(\r\n    total_2pt_made = sum(is_2pt_made, na.rm = TRUE),\r\n    total_3pt_made = sum(is_3pt_made, na.rm = TRUE),\r\n    total_ft_made  = sum(is_ft_made, na.rm = TRUE),\r\n    total_pts_scored = sum((total_2pt_made * 2) +\r\n                             (total_3pt_made * 3) +\r\n                             (total_ft_made * 1))) %>%\r\n  dplyr::ungroup()\r\n  \r\n} \r\n\r\n\r\n\r\nVisualise player performance\r\nBelow, we will use a violin plot to visualise player performance. Basically, a violin plot allows us to visualise the distribution of points scored per minute for different player combinations.\r\n(i) Kevin Durant\r\n\r\n\r\n(perform_per_min_kd <- calc_performance_min(player = c(\"Kevin Durant\")) %>%\r\n  ggplot(data = ., aes(x = players_on_court, \r\n                       y = total_pts_scored,\r\n                       fill = players_on_court)) +\r\n  scale_fill_grey() +\r\n  labs(x = \"Players on court\",\r\n       y = \"Total pts scored (per minute)\") +\r\n  geom_violin() +\r\n  coord_flip())\r\n\r\n\r\n\r\n\r\nKD’s performance is relatively consistent irrespective of who is on court, including James Harden and Kyrie Irving. If anything KD seems to perform slightly better when he plays with James Harden, as indicated by fewer minutes with 0 points scored and slightly more minutes with 2 and 3 points scored, than when he plays with Kyrie.\r\n(ii) Kyrie Irving\r\n\r\n\r\n(perform_per_min_kyrie <- calc_performance_min(player = c(\"Kyrie Irving\")) %>%\r\n   # Seems like there are a handful of records of Kyrie scoring more than 10 \r\n   # pts per minute - this doesn't overly realistic - or may be an artifact \r\n   # of lots of fouls in the last minute, so I have exlcluded these records \r\n  dplyr::filter(total_pts_scored < 10) %>%\r\n  ggplot(data = ., aes(x = players_on_court, \r\n                       y = total_pts_scored,\r\n                       fill = players_on_court)) +\r\n  labs(x = \"Players on court\",\r\n       y = \"Total pts scored (per minute)\") +\r\n  scale_fill_grey() +\r\n  geom_violin() + \r\n  coord_flip())\r\n\r\n\r\n\r\n\r\nAgain, Kyrie seems to be extremely consistent, irrespective of the team lineup.\r\n(iii) James Harden\r\n\r\n\r\n(perform_per_min_harden <- calc_performance_min(player = c(\"James Harden\")) %>%\r\n  ggplot(data = ., aes(x = players_on_court, \r\n                       y = total_pts_scored,\r\n                       fill = players_on_court)) +\r\n  scale_fill_grey() +\r\n  labs(x = \"Players on court\",\r\n       y = \"Total pts scored (per minute)\") +\r\n  geom_violin() + \r\n  coord_flip())\r\n\r\n\r\n\r\n\r\nFinally… James Harden seems to perform a little differently, depending on whether KD and/or Kyrie Irving are on court at the same time. Two things stand out. Firstly, James Harden seems to have more minutes scoring 0 points when KD and Kyrie are both playing. This makes sense - at the time of writing this article, Harden leads the league in assists per game (11 per game!!!). When the Big 3 are on the court together, Harden is the distributor. Secondly, Harden turns up the heat when he is playing without KD and Kyrie. He has quite a few minute bouts of scoring 5 and 6 pts when playing alone, which is much less likely to occur when KD and/or Kyrie are playing.\r\nBut, what about the rest of the Nets lineup? How do the Big 3 impact scoring by their teammates? Let’s take a look at one of my favorite players in the league - Joe Harris.\r\n(iv) Joe Harris\r\n\r\n\r\n(perform_per_min_harris <- calc_performance_min(player = c(\"Joe Harris\")) %>%\r\n  ggplot(data = ., aes(x = players_on_court, \r\n                       y = total_pts_scored,\r\n                       fill = players_on_court)) +\r\n  scale_fill_grey() +\r\n  labs(x = \"Players on court\",\r\n       y = \"Total pts scored (per minute)\") +\r\n  geom_violin() + \r\n  coord_flip())\r\n\r\n\r\n\r\n\r\nUnsurprisingly, Joe Harris has many more minutes without scoring when the Big 3 are all on the court than when the Big 3 aren’t playing. He seems to score consistently when any 2 of KD, Harden and Kyrie are playing. A noticeable drop in scoring for Joe occurs when only Kyrie is on court…\r\nTake home\r\nAt this early stage in the season, I don’t see any evidence to suggest the Big 3 impede each others play. Across the board, KD, Harden and Kyrie seem to play as well (in terms of points scored per minute) with or without other members of the Big 3 on court. No surprises there. These guys are serious professionals. One caveat to this analysis is that the Big 3 have only played a handful of games together so far. It will be very interesting to see what this same analysis produces at the end of the season.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-02-02-do-the-nets-big-3-play-better-together/do-the-nets-big-3-play-better-together_files/figure-html5/kd graph-1.png",
    "last_modified": "2021-02-12T23:01:43+02:00",
    "input_file": "do-the-nets-big-3-play-better-together.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/2021-01-25-do-nba-players-get-tired/",
    "title": "Do NBA players get tired? A case-study of Giannis Antetokounmpo",
    "description": "NBA players are ATHLETES. But, do they get tired? Does their performance decline late in the game?",
    "author": [
      {
        "name": "Guy Frederick Sutton",
        "url": {}
      }
    ],
    "date": "2021-01-25",
    "categories": [
      "R",
      "tidyverse",
      "Data cleaning",
      "ggplot2",
      "Player performance",
      "Milwaukee Bucks",
      "Giannis Antetokounmpo"
    ],
    "contents": "\r\nIt always amazes me watching professional athletes at work. If I had to run, shoot, defend, sprint, screen like the NBA pros do… I would be lying on the floor, gasping for air within the 1st quarter. This got me thinking, do NBA players get tired? Does their performance vary over time? Do they make fewer rebounds or field goals the longer they have been on the court? While this is certainly a topic that peeks my interest, there are also some practical implications. For example, it could be quite informative to identify optical performance thresholds for each player to know:\r\nhow long can they perform at their peek abilities per game? (e.g. how many minutes per game is optimal for their performance?), and\r\n\r\nhow long each stint on court during the game should be to maximise performance?\r\n\r\nIn my first blog post, I will be exploring these two questions using some basic data visualisations. Later blogposts will get into a bit more detail (building some statistical models) - stay tuned!\r\nLoad required packages\r\nThe workhorse package we will be using is the NBA stats API package nbastatR. We need to install the package from GitHub, which only needs to be done once.\r\n\r\n\r\n# To install a GitHub package: \r\ndevtools::install_github(\"abresler/nbastatR\")\r\n\r\n# Once you have downloaded a GitHub package, we should then\r\n# edit our code so that the package is not re-installed each time we \r\n# re-run our script. We place a '#' in front of the command to comment it out. \r\n# If we need to run that code again later, we simply remove the '#' \r\n# devtools::install_github(\"abresler/nbastatR\")\r\n\r\n\r\n\r\nOur next step is to load the other packages we will require for this analysis. I really like using the pacman package to install/load R packages. I find this really helps when sharing code with collaborators who are less familiar with R. They can just open the script and press ‘run’ and not have to worry about installing new packages. pacman will install any packages that are not installed on your machine, and load all the remaining packages.\r\n\r\n\r\n# Load required packages \r\nif (!require(\"pacman\")) install.packages(\"pacman\")\r\npacman::p_load(tidyverse, \r\n               lubridate,\r\n               zoo,\r\n               janitor,\r\n               nbastatR,\r\n               future,\r\n               scales)\r\n\r\n\r\n\r\nDownloading play-by-play data\r\nWe will now use the nbastatR package to download play-by-play data from the NBA API. We can download data for different seasons, different teams… This can take a really long time (at least it does on my PC), so below, I will just download the data for (1) the 2019/2020 season, and (2) only the Milwaukee Bucks.\r\n\r\n\r\n# Extract all games for the 2020 season (excluding pre-season and all-star weekend)\r\ngame_logs <- game_logs(seasons = 2020)\r\n\r\n# Process the game logs \r\ngames <- game_logs %>%\r\n  # Keep only these columns \r\n  dplyr::select(idGame, slugTeam, slugOpponent, locationGame) %>%\r\n  # Use a conditional statement to process the team home/away data \r\n  dplyr::mutate(slugTeamHome = dplyr::if_else(locationGame == \"H\", \r\n                                              slugTeam, \r\n                                              slugOpponent),\r\n                slugTeamAway = dplyr::if_else(locationGame == \"A\", \r\n                                              slugTeam, \r\n                                              slugOpponent)) %>%\r\n  # Drop these columns - no longer required\r\n  dplyr::select(-c(slugTeam, slugOpponent, locationGame)) %>%\r\n  dplyr::distinct(idGame, .keep_all = TRUE) %>%\r\n  # Here, we filter for the teams we want data for \r\n  # We have to use team codes. E.g. MIL = Milwaukee Bucks\r\n  # - Filter the games where either (denoted by the '|' bar) the home or \r\n  #   or away team is the Bucks. \r\n  dplyr::filter(slugTeamHome == \"MIL\" | slugTeamAway == \"MIL\")\r\n\r\n# Extract the play-by-play for each game \r\nplay_logs_all <- play_by_play_v2(game_ids = unique(games$idGame))\r\n\r\n\r\n\r\nOnce the data is downloaded, quite a bit of data pre-processing and data cleaning is required, which will not be shown in this blogpost. I have edited this code slightly from the amazing NBA blog by Ramiro Bentes. If you want to delve into the data cleaning code, it is available in the [source R markdown file] (https://github.com/guysutton/nba_analytics_blog/blob/main/_posts/2021-01-25-do-nba-players-get-tired/do-nba-players-get-tired.Rmd) for this blogpost.\r\nWe now have play-by-play data for all the Milwaukee Bucks games for the 2019/2020 season. Each game has a unique ID number (idGame), each play within each game has its own unique ID (numberEvent), and for each play, we have the players who were on the court for each team (homeTeamLineup and awayTeamLineup), amongst a range of other variables.\r\n\r\n# A tibble: 6 x 29\r\n  idGame numberEventMess~ numberEventActi~ slugTeamHome slugTeamAway\r\n  <chr>  <chr>            <chr>            <chr>        <chr>       \r\n1 21900~ 12               0                HOU          MIL         \r\n2 21900~ 10               0                HOU          MIL         \r\n3 21900~ 1                1                HOU          MIL         \r\n4 21900~ 5                1                HOU          MIL         \r\n5 21900~ 6                2                HOU          MIL         \r\n6 21900~ 3                11               HOU          MIL         \r\n# ... with 24 more variables: slugTeamPlayer1 <chr>,\r\n#   slugTeamPlayer2 <chr>, slugTeamPlayer3 <chr>, numberPeriod <chr>,\r\n#   timeQuarter <chr>, secsPassedGame <dbl>, numberEvent <dbl>,\r\n#   namePlayer1 <chr>, namePlayer2 <chr>, namePlayer3 <chr>,\r\n#   descriptionPlayHome <chr>, descriptionPlayVisitor <chr>,\r\n#   ptsHome <chr>, ptsAway <chr>, shotPtsHome <chr>,\r\n#   shotPtsAway <chr>, marginBeforeHome <chr>,\r\n#   marginBeforeAway <chr>, lineupHome <chr>, lineupAway <chr>,\r\n#   canSub <chr>, newptsHome <chr>, newptsAway <chr>, subOpp <chr>\r\n\r\nHowever, we still need to process the data so that we can:\r\nDefine how many periods each player was on the court for during each game\r\nDefine how long was each period\r\nConvert our data into long-format, so that each player who was on the court, for each play, gets their own row. (We will need this format of data when we start summarising how player performance later on).\r\n\r\n\r\n\r\nWe now know exactly which plays each player was on the court for, but we need to create a column which explicitly notes whether the player was on the court or not (stints), and how long each stint on court lasted.\r\n\r\n\r\n# Define each stint each player has on court \r\ndefine_stint <- game_test %>%\r\n  # Define stints as the cumulative sum of times the player is subbed\r\n  # cumsum starts at 0, so we need to + 1 to each value \r\n  dplyr::mutate(stints_on_court = cumsum(player_subbed == \"Yes\"),\r\n                stints_on_court = stints_on_court + 1) %>%\r\n  dplyr::ungroup() %>%\r\n  # Define start and end time of each stint with a min/max statement\r\n  dplyr::group_by(idGame, playerNames, stints_on_court) %>%\r\n  dplyr::mutate(time_at_start = min(secsPassedGame),\r\n                time_at_end   = max(secsPassedGame)) %>%\r\n  # Calculate total seconds of each stint\r\n  dplyr::mutate(time_stint_secs = time_at_end - time_at_start) %>%\r\n  # Convert seconds into minutes and seconds \r\n  dplyr::mutate(time_stint_mins = time_stint_secs / 60) %>%\r\n  # Calculate time since start of each stint \r\n  dplyr::mutate(time_since_start_stint = secsPassedGame - time_at_start) %>%\r\n  # Manually define 60 second intervals - \r\n  # I couldn't force ggplot2::cut_width to start @ 0... Help?  \r\n  dplyr::mutate(minute_cats = dplyr::case_when(\r\n    between(time_since_start_stint, 0, 60) ~ \"1\",\r\n    between(time_since_start_stint, 61, 120) ~ \"2\",\r\n    between(time_since_start_stint, 121, 180) ~ \"3\",\r\n    between(time_since_start_stint, 181, 240) ~ \"4\",\r\n    between(time_since_start_stint, 241, 300) ~ \"5\",\r\n    between(time_since_start_stint, 301, 360) ~ \"6\",\r\n    between(time_since_start_stint, 361, 420) ~ \"7\",\r\n    between(time_since_start_stint, 421, 480) ~ \"8\",\r\n    between(time_since_start_stint, 481, 540) ~ \"9\",\r\n    between(time_since_start_stint, 541, 600) ~ \"10\",\r\n    between(time_since_start_stint, 601, 660) ~ \"11\",\r\n    between(time_since_start_stint, 661, 720) ~ \"12\",\r\n    between(time_since_start_stint, 721, 780) ~ \"13\",\r\n    between(time_since_start_stint, 781, 840) ~ \"14\",\r\n    between(time_since_start_stint, 841, 900) ~ \"15\",\r\n    between(time_since_start_stint, 901, 960) ~ \"16\",\r\n    between(time_since_start_stint, 961, 1020) ~ \"17\",\r\n    between(time_since_start_stint, 1021, 1080) ~ \"18\",\r\n    between(time_since_start_stint, 1081, 1140) ~ \"19\",\r\n    between(time_since_start_stint, 1141, 1200) ~ \"20\",\r\n    between(time_since_start_stint, 1221, 1280) ~ \"21\",\r\n    between(time_since_start_stint, 1281, 1340) ~ \"22\",\r\n    between(time_since_start_stint, 1341, 1400) ~ \"23\",\r\n    between(time_since_start_stint, 1401, 1460) ~ \"24\")) %>%\r\n  # For each play, does the score change or not?\r\n  # - We will need this to classify whether 2pt/3pt/free throw attempts\r\n  #   were successful or not. \r\n  dplyr::mutate(score_change = dplyr::if_else(shotPtsHome > 0 | \r\n                                                shotPtsAway > 0, 1, 0))\r\n\r\n\r\n\r\nOur last bit of data cleaning requires that we categorize each play. For example, was the play a 2pt field goal attempt, a free throw attempt, was the shot made or missed?\r\n\r\n\r\n# Combine the descriptions for each play for home and away teams into \r\n# a single column\r\ndescription_play <- define_stint %>%\r\n  dplyr::mutate(descriptionPlay = dplyr::coalesce(descriptionPlayHome, descriptionPlayVisitor))\r\n\r\n# Define each event as a particular play\r\nevents_defined <- description_play %>%\r\n  # Was 3pt fg attempt made?\r\n  dplyr::mutate(is_3pt_made = dplyr::case_when(\r\n    stringr::str_detect(descriptionPlay, \"3PT\") &\r\n      score_change == 1 ~ 1,\r\n    stringr::str_detect(descriptionPlay, \"3PT\") &\r\n      score_change == 0 ~ 0)) %>%\r\n  # Was 2pt fg attempt made?\r\n  dplyr::mutate(is_2pt_made = dplyr::case_when(\r\n    numberEventMessageType == 1 & \r\n      !stringr::str_detect(descriptionPlay, \"3PT\") ~ 1,\r\n    numberEventMessageType == 2 & \r\n      !stringr::str_detect(descriptionPlay, \"3PT\") ~ 0)) %>%\r\n  # Was event a rebound? \r\n  dplyr::mutate(is_rebound = dplyr::case_when(\r\n    numberEventMessageType == 4 & \r\n      stringr::str_detect(descriptionPlay, \"REBOUND\") ~ 1,\r\n    TRUE ~ 0)) %>%\r\n  # Was event a made free throw?\r\n  dplyr::mutate(is_ft_made = dplyr::case_when(\r\n    numberEventMessageType == 3 & \r\n      score_change == 1 ~ 1,\r\n    numberEventMessageType == 3 & \r\n      score_change == 0 ~ 0))\r\n\r\n\r\n\r\nSummarise and visualise performance over time\r\nFinally, the bit of the analysis that we are actually most interested in. Let’s now summarise how many 2pt/3pt/free throws/rebounds are made per minute that each player is on the court, for each game, and then these summarise performance metrics over the entire 2020 season.\r\n\r\n\r\nperform_stint_min <- events_defined %>%\r\n  dplyr::ungroup() %>%\r\n  dplyr::filter(playerNames == \"Giannis Antetokounmpo\") %>%\r\n  dplyr::filter(namePlayer1 == \"Giannis Antetokounmpo\") %>%\r\n  dplyr::group_by(playerNames, idGame, stints_on_court, minute_cats, .drop = FALSE) %>%\r\n  dplyr::summarise(\r\n    total_rebounds = sum(is_rebound, na.rm = TRUE),\r\n    total_2pt_made = sum(is_2pt_made, na.rm = TRUE),\r\n    total_2pt_attempt = sum(!is.na(is_2pt_made)),\r\n    perc_2pt_made = total_2pt_made / total_2pt_attempt,\r\n    total_3pt_made = sum(is_3pt_made, na.rm = TRUE),\r\n    total_3pt_attempt = sum(!is.na(is_3pt_made)),\r\n    perc_3pt_made = total_3pt_made / total_3pt_attempt,\r\n    total_ft_made  = sum(is_ft_made, na.rm = TRUE),\r\n    total_ft_attempt = sum(!is.na(is_ft_made)),\r\n    perc_ft_made = total_ft_made / total_ft_attempt) %>%\r\n  dplyr::ungroup()%>%\r\n  # Now calculate mean summary for season (not per-game)\r\n  dplyr::group_by(playerNames, stints_on_court, minute_cats, .drop = FALSE) %>%\r\n  dplyr::summarise(\r\n    n_rebounds       = mean(total_rebounds, na.rm = TRUE),\r\n    n_2pt_made       = mean(total_2pt_made, na.rm = TRUE),\r\n    n_3pt_made       = mean(total_3pt_made, na.rm = TRUE),\r\n    n_ft_attempt     = mean(total_ft_made, na.rm = TRUE),\r\n    sd_rebounds      = sd(total_rebounds, na.rm = TRUE),\r\n    sd_2pt_made      = sd(total_2pt_made, na.rm = TRUE),\r\n    sd_3pt_made      = sd(total_3pt_made, na.rm = TRUE),\r\n    sd_ft_attempt    = sd(total_ft_made, na.rm = TRUE),\r\n    n = n()) %>%\r\n  # Filter to keep only stints with n => 10 per player\r\n  dplyr::filter(!n < 9)\r\nperform_stint_min\r\n\r\n\r\n\r\nLet’s take a quick look at the structure of our data now.\r\n\r\nRows: 46\r\nColumns: 12\r\nGroups: playerNames, stints_on_court [7]\r\n$ playerNames     <chr> \"Giannis Antetokounmpo\", \"Giannis Antetok...\r\n$ stints_on_court <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2,...\r\n$ minute_cats     <chr> \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"...\r\n$ n_rebounds      <dbl> 0.5641026, 0.7708333, 0.4509804, 0.560000...\r\n$ n_2pt_made      <dbl> 0.3589744, 0.3541667, 0.4117647, 0.500000...\r\n$ n_3pt_made      <dbl> 0.02564103, 0.08333333, 0.15686275, 0.020...\r\n$ n_ft_attempt    <dbl> 0.17948718, 0.10416667, 0.11764706, 0.100...\r\n$ sd_rebounds     <dbl> 0.5980174, 0.5921322, 0.6422998, 0.611455...\r\n$ sd_2pt_made     <dbl> 0.5374001, 0.5255021, 0.5357787, 0.646813...\r\n$ sd_3pt_made     <dbl> 0.1601282, 0.2793102, 0.3672900, 0.141421...\r\n$ sd_ft_attempt   <dbl> 0.5063697, 0.4721875, 0.4311408, 0.303045...\r\n$ n               <int> 39, 48, 51, 50, 48, 37, 24, 16, 45, 46, 4...\r\n\r\nHow many minutes should Giannis play per stint on court?\r\nBelow, we create a very simple ggplot visualisation of the average number of rebounds effected per minute by Giannis Antetokounmpo for each period/stint that he was on the court over the 2020 season. A nice little trick that I have been using in recent months is to use geom_smooth instead of geom_line or geom_point to visualise the relationship between two continuous variables. This is by no means meant to be a predictive model - this is simply an exploratory data analysis (EDA) exercise.\r\n(i) Number of rebounds\r\n\r\n\r\nperform_stint_min %>%\r\n  dplyr::mutate(stints_on_court = as.factor(stints_on_court)) %>%\r\n  dplyr::mutate(minute_cats = readr::parse_double(minute_cats)) %>%\r\n  ggplot(data = ., aes(x = minute_cats, \r\n                       y = n_rebounds,\r\n                       group = stints_on_court,\r\n                       colour = stints_on_court)) +\r\n  geom_smooth(aes(fill = stints_on_court),\r\n              alpha = 0.3) +\r\n   scale_y_continuous(limit=c(0,3),oob=squish) +\r\n  #scale_y_continuous(limits = c(0, 2)) +\r\n  labs(x = \"Minutes on court (mins)\",\r\n       y = \"No. of rebounds \\n(per minute)\",\r\n       subtitle = \"Each panel represents a period/stint that he was on the court\") +\r\n  facet_wrap(~ stints_on_court, ncol = 3)\r\n\r\n\r\n\r\n\r\nGiannis seems to rebound really consistently. There is no apparent decline in rebounding rate the longer he is on the court.\r\n(ii) Number of 2PT FG’s made per game\r\n\r\n\r\nperform_stint_min %>%\r\n  #dplyr::mutate(stints_on_court = as.factor(stints_on_court)) %>%\r\n  dplyr::mutate(minute_cats = readr::parse_double(minute_cats)) %>%\r\n  dplyr::filter(stints_on_court < 6) %>%\r\n  ggplot(data = ., aes(x = minute_cats, \r\n                       y = n_2pt_made,\r\n                       group = stints_on_court,\r\n                       colour = stints_on_court)) +\r\n  geom_smooth(aes(fill = stints_on_court),\r\n              alpha = 0.3) +\r\n  labs(x = \"Minutes on court (mins)\",\r\n       y = \"No. of 2PT FG made \\n(per minute)\",\r\n       subtitle = \"Each panel represents a period/stint that he was on the court\") +\r\n  facet_wrap(~ stints_on_court, ncol = 3)\r\n\r\n\r\n\r\n\r\nGiannis seems to make 2PT field goals quite consistently. There is no apparent decline in scoring rate the longer he is on the court. It is no surprise that Giannis is closing in on 11 000 points for the Bucks at only 26 years old.\r\nHow many minutes should Giannis play per game?\r\nAbove we looked at Giannis’s performance (no. rebounds and 2PT scoring) per minute player during successive stints on court. This data could help us to determine how long Giannis could be expected to perform at his peak capacity for each stint he has on court (hint: his performance doesn’t decline over time). However, what if we wanted to see how many minutes Giannis should be playing per game to maximise performance?\r\n(i) Number of rebounds\r\n\r\n\r\n\r\n\r\n\r\nperform_stint_game %>%\r\n  ggplot(data = ., aes(x = total_minutes_game, \r\n                       y = n_rebounds)) +\r\n  geom_smooth(colour = \"black\") +\r\n  labs(x = \"Total minutes played (mins)\",\r\n       y = \"No. of rebounds \\n(per minute)\") \r\n\r\n\r\n\r\n\r\nGiannis gets plenty of rebounds throughout the game, but the rate at which he rebounds does decrease over the course of the game, but increases in the last 10 minutes. There is a small lull in rebounding (<0.1 fewer rebounds) after 10 - 20 minutes on court versus his first 10 minutes. All things considered, Giannis’s rebounding rate is pretty consistent over an entire game.\r\n(ii) Number of 2PT FG’s made per game\r\n\r\n\r\nperform_stint_game %>%\r\n  #dplyr::mutate(stints_on_court = as.factor(stints_on_court)) %>%\r\n  #dplyr::mutate(total_m = readr::parse_double(minute_cats)) %>%\r\n  dplyr::filter(playerNames == \"Giannis Antetokounmpo\") %>%\r\n  ggplot(data = ., aes(x = total_minutes_game, \r\n                       y = n_2pt_made)) +\r\n  geom_smooth(colour = \"black\") +\r\n  labs(x = \"Total minutes played (mins)\",\r\n       y = \"No. of 2PT FG's made \\n(per minute)\") \r\n\r\n\r\n\r\n\r\nGiannis can clearly maintain his optimal 2PT scoring rate over the duration of an entire game.\r\nWhat R skills did we learn today?\r\nDownload NBA play-by-play data from the NBA API\r\nProcess the data using common tidyverse cleaning packages (e.g. dplyr, tidyr, stringr)\r\nCreate simple ggplot graphics to visualise player performance over time\r\nAnalytics implications:\r\nThe workflow presented above is how I approach exploratory data analysis (EDA) when building predictive models. I like to invest a lot of time into my EDA to get a really good understanding of the underlying data I am working with. In terms of model building, I like to only include predictor variables that appear to have some justifiable relationship with whatever our response variable is. Moreover, I like to have some idea of what form the function of y ~ x should take. For example, if we were trying to build a model to predict how many points Giannis will score per game, our EDA suggests that a linear relationship between minutes played per game and number of 2PT field goals MAY be appropriate. If we had found evidence that his 2PT scoring rate declines over time, we would then want to fit a non-linear trend for this relationship. There was a small dip in scoring rates in the 10 - 20 minute period, so we still may want a non-linear term in our model, but we could start with a linear term and build from there.\r\nPractical implications:\r\nGiannis’s performance is consistent over the course of a game. There is no obvious drop-off in his rebounding rate or 2PT scoring rates, both with respect to how many minutes he plays in each game, and with respect to how many stints on court he has and how long each stint is. It would be interesting to see how he performs above 35+ minutes per game…\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-01-25-do-nba-players-get-tired/do-nba-players-get-tired_files/figure-html5/giannis 2pt total minutes-1.png",
    "last_modified": "2021-01-27T10:07:59+02:00",
    "input_file": "do-nba-players-get-tired.utf8.md",
    "preview_width": 1248,
    "preview_height": 768
  },
  {
    "path": "posts/welcome/",
    "title": "Welcome to data science in R for the NBA",
    "description": "For all things data science, NBA and analytics",
    "author": [
      {
        "name": "Guy Frederick Sutton",
        "url": {}
      }
    ],
    "date": "2021-01-23",
    "categories": [],
    "contents": "\r\nI have always been an avid sports fanatic - growing up as a kid in South Africa, sport is just a way of life. Rugby, cricket, football (soccer), golf, tennis, you name it… As I got older, my attention shifted to American football (NFL) and baseball. More recently, I have become a massive NBA fan - who can say no to a massive Jarrett Allen block, or a Giannis dunk?\r\nThis blog will serve as a space for me to combine my love for basketball and data analytics/data science that I have developed over the course of getting a PhD in the sciences. I have about 8 years of experience using the R statistical platform, which has become one of the most popular statistics programmes worldwide. Most of my work will thus be written in R, however, I hope to add to my data analysis skills by learning some new languages and skills (e.g. Julia and SQL).\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-01-23T22:21:12+02:00",
    "input_file": {}
  }
]
